recodeLevels <- function(y, c) {
data <- data.table(y = y, c = c)
newOrder <- data[, mean(y), by = c] %>% arrange(V1)
c <- factor(c, levels = as.character(newOrder[, 1]))
c
}
mergeLevels <- function(c, whichEnds) {
newLetter <- paste0(levels(c)[whichEnds - 1], levels(c)[whichEnds])
levels(c) <- c(levels(c), newLetter)
c[c %in% levels(c)[(whichEnds - 1):whichEnds]] <- newLetter
c
}
factorMergerer <- function(means, segment, mergingList, myData) {
me <- list(means = means,
segment = segment,
mergingList = mergingList,
myData = myData)
class(me) <- append(class(me), "factorMergerer")
return(me)
}
mergeFactors <- function(y, class) {
class <- recodeLevels(y, class)
myData <- data.table(y = y, class = class)
model <- lm(y ~ class, myData, contrasts = list(class = contr.sdif))
means <- myData[, mean(y), by = class] %>% arrange(V1)
means$logLikelihood <- logLik(model)
means$class <- as.character(means$class)
means$step <- 0
means$pVals <- 1
mergingList <- list()
segment <- data.table(nodeId = means$class,
xStart = means$V1,
yStart = means$logLikelihood,
xEnd = means$V1,
yEnd = 0,
step = 0)
segment$nodeId <- as.character(segment$nodeId)
k <- length(unique(class))
while((numberOfGroups <- length(unique(class))) >= 2) {
# print(paste0("Model z ", numberOfGroups, " parametrami: ", logLik(model)))
pVals <- summary(model)$coefficient[, 4]
end <- which.max(pVals)
mergingSet <- levels(class)[(end - 1):end]
# print(mergingSet)
step <- k - numberOfGroups + 1
mergingList[[step]] <- mergingSet
newClass <- mergeLevels(class, end)
newClass <- recodeLevels(y, newClass)
myNewData <- data.table(y = y, class = newClass)
if (length(levels(newClass)) == 1) {
model <- model <- lm(y ~ 1, myNewData)
} else {
model <- lm(y ~ class, myNewData, contrasts = list(class = contr.sdif))
}
segment[segment$nodeId %in% mergingSet]$yEnd <- logLik(model)
segment <- rbind(segment, list(paste(mergingSet, collapse = ""),
mean(myData$y[class %in% mergingSet]),
as.numeric(logLik(model)),
mean(myData$y[class %in% mergingSet]),
0, step))
segment <- rbind(segment, list(paste(mergingSet, collapse = "-"),
mean(myData$y[class %in% mergingSet[1]]),
as.numeric(logLik(model)),
mean(myData$y[class %in% mergingSet[2]]),
as.numeric(logLik(model)), step))
means <- rbind(means, list(paste(mergingSet, collapse = ""),
mean(myData$y[class %in% mergingSet]),
logLik(model),
step,
max(pVals)))
class <- newClass
myData <- myNewData
}
factorMergerer(means = means, segment = segment, mergingList = mergingList, myData = myData)
}
plotTree <- function(list, rotate = 0) {
myData <- list$myData
segment <- list$segment
means <- list$means
globalMean <- mean(myData$y)
globalLoglik <- min(means$logLikelihood)
minLogLik <- min(-segment$yStart)
maxLogLik <- max(-segment$yEnd)
lowerPlotBound <- minLogLik - (maxLogLik - minLogLik) / 4
upperPlotBound <- maxLogLik
segment <- filter(segment, yEnd != 0)
segment <- as.data.table(segment)
segment[, group := ifelse(step == 0, nodeId, "")]
segmentPlot <- ggplot(segment) +
geom_segment(aes(x = xStart, y = -yStart, xend = xEnd, yend = -yEnd)) +
geom_point(aes(x = xStart, y = -yStart)) + geom_point(aes(x = xEnd, y = -yEnd)) +
geom_point(x = globalMean, y = -globalLoglik) + theme_bw() +
geom_text_repel(aes(x = xStart, y = -yStart, label = group), angle = rotate) +
xlab("Średnie w grupach") + ylab("-logLikelihood") +
ylim(c(lowerPlotBound, upperPlotBound))
segmentPlot
}
generateSample <- function(N, k) {
y <- rnorm(N)
class <- as.factor(sample(LETTERS[1:k], size = N, replace = TRUE))
for (i in 1:k) {
random <- sample(seq(0,1,0.1), size = 1)
let <- LETTERS[i]
y[class == let] <- y[class == let] + random
}
data.table(y = y, class = recodeLevels(y, class))
}
k <- 4; N <- 1000
myData <- generateSample(N, k)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, results = 'hide')
rm(list = ls())
library(ggplot2)
library(dplyr)
library(data.table)
library(MASS)
library(knitr)
library(PBImisc)
library(scales)
library(ggrepel)
apartmentsSubset <- PBImisc::apartments
apartmentsSubset <- subset(apartmentsSubset, select = c(transaction.price, street))
apartmentsSubset <- filter(apartmentsSubset, street %in% c("Chelmska",
"Odkryta",
"Czerniakowska",
"Broniewskiego",
"Jana Pawla",
"KEN",
"Pulawska",
"Raclawicka"))
apartmentsSubset$street <- factor(apartmentsSubset$street)
apartmentsSubset %>% ggplot() + geom_boxplot(aes(x = street, y = transaction.price)) +
theme(axis.text.x = element_text(angle = 90)) +
coord_flip()
anova(lm(transaction.price ~ street, data = apartmentsSubset))
summary(aov(transaction.price ~ street, data = apartmentsSubset))
library(agricolae)
lsdResult <- LSD.test(aov(transaction.price ~ street, data = apartmentsSubset),
trt = "street",
p.adj = "bonferroni")
lsdResult$groups
recodeLevels <- function(y, c) {
data <- data.table(y = y, c = c)
newOrder <- data[, mean(y), by = c] %>% arrange(V1)
c <- factor(c, levels = as.character(newOrder[, 1]))
c
}
mergeLevels <- function(c, whichEnds) {
newLetter <- paste0(levels(c)[whichEnds - 1], levels(c)[whichEnds])
levels(c) <- c(levels(c), newLetter)
c[c %in% levels(c)[(whichEnds - 1):whichEnds]] <- newLetter
c
}
factorMergerer <- function(means, segment, mergingList, myData) {
me <- list(means = means,
segment = segment,
mergingList = mergingList,
myData = myData)
class(me) <- append(class(me), "factorMergerer")
return(me)
}
mergeFactors <- function(y, class) {
class <- recodeLevels(y, class)
myData <- data.table(y = y, class = class)
model <- lm(y ~ class, myData, contrasts = list(class = contr.sdif))
means <- myData[, mean(y), by = class] %>% arrange(V1)
means$logLikelihood <- logLik(model)
means$class <- as.character(means$class)
means$step <- 0
means$pVals <- 1
mergingList <- list()
segment <- data.table(nodeId = means$class,
xStart = means$V1,
yStart = means$logLikelihood,
xEnd = means$V1,
yEnd = 0,
step = 0)
segment$nodeId <- as.character(segment$nodeId)
k <- length(unique(class))
while((numberOfGroups <- length(unique(class))) >= 2) {
# print(paste0("Model z ", numberOfGroups, " parametrami: ", logLik(model)))
pVals <- summary(model)$coefficient[, 4]
end <- which.max(pVals)
mergingSet <- levels(class)[(end - 1):end]
# print(mergingSet)
step <- k - numberOfGroups + 1
mergingList[[step]] <- mergingSet
newClass <- mergeLevels(class, end)
newClass <- recodeLevels(y, newClass)
myNewData <- data.table(y = y, class = newClass)
if (length(levels(newClass)) == 1) {
model <- model <- lm(y ~ 1, myNewData)
} else {
model <- lm(y ~ class, myNewData, contrasts = list(class = contr.sdif))
}
segment[segment$nodeId %in% mergingSet]$yEnd <- logLik(model)
segment <- rbind(segment, list(paste(mergingSet, collapse = ""),
mean(myData$y[class %in% mergingSet]),
as.numeric(logLik(model)),
mean(myData$y[class %in% mergingSet]),
0, step))
segment <- rbind(segment, list(paste(mergingSet, collapse = "-"),
mean(myData$y[class %in% mergingSet[1]]),
as.numeric(logLik(model)),
mean(myData$y[class %in% mergingSet[2]]),
as.numeric(logLik(model)), step))
means <- rbind(means, list(paste(mergingSet, collapse = ""),
mean(myData$y[class %in% mergingSet]),
logLik(model),
step,
max(pVals)))
class <- newClass
myData <- myNewData
}
factorMergerer(means = means, segment = segment, mergingList = mergingList, myData = myData)
}
plotTree <- function(list, rotate = 0) {
myData <- list$myData
segment <- list$segment
means <- list$means
globalMean <- mean(myData$y)
globalLoglik <- min(means$logLikelihood)
minLogLik <- min(-segment$yStart)
maxLogLik <- max(-segment$yEnd)
lowerPlotBound <- minLogLik - (maxLogLik - minLogLik) / 4
upperPlotBound <- maxLogLik
segment <- filter(segment, yEnd != 0)
segment <- as.data.table(segment)
segment[, group := ifelse(step == 0, nodeId, "")]
segmentPlot <- ggplot(segment) +
geom_segment(aes(x = xStart, y = -yStart, xend = xEnd, yend = -yEnd)) +
geom_point(aes(x = xStart, y = -yStart)) + geom_point(aes(x = xEnd, y = -yEnd)) +
geom_point(x = globalMean, y = -globalLoglik) + theme_bw() +
geom_text_repel(aes(x = xStart, y = -yStart, label = group), angle = rotate) +
xlab("Średnie w grupach") + ylab("-logLikelihood") +
ylim(c(lowerPlotBound, upperPlotBound))
segmentPlot
}
generateSample <- function(N, k) {
y <- rnorm(N)
class <- as.factor(sample(LETTERS[1:k], size = N, replace = TRUE))
for (i in 1:k) {
random <- sample(seq(0,1,0.1), size = 1)
let <- LETTERS[i]
y[class == let] <- y[class == let] + random
}
data.table(y = y, class = recodeLevels(y, class))
}
k <- 4; N <- 1000
myData <- generateSample(N, k)
myData %>% ggplot() + geom_boxplot(aes(y = y, x = class, group = class))
merging <- mergeFactors(myData$y, myData$class)
merging$mergingList
plotTree(merging)
maxNumberOfGroups <- 10
trees <- list()
for (i in seq(4, maxNumberOfGroups, 2)) {
myData <- generateSample(N, i)
trees[[(i - 2) / 2]] <- plotTree(mergeFactors(myData$y, myData$class))
}
library(gridExtra)
grid.arrange(trees[[1]], trees[[2]], trees[[3]],
trees[[4]], nrow = 2)
apartmentsMerged <- mergeFactors(apartmentsSubset$transaction.price, apartmentsSubset$street)
plotTree(apartmentsMerged, rotate = 90)
tmpData <- generateSample(1000, 5)
tmpData
model <- lm(y ~ class, tmpData, contrasts = contr.sdif())
model <- lm(y ~ class, tmpData, contrasts = contr.sdif)
summary(model)
model.matrix(model)
model <- lm(y ~ class, tmpData, contrasts = list(class = contr.sdif))
summary(model)
tmpData$class <- mergeLevels(tmpData$class, 4)
tmpData$class
tmpData$class <- recodeLevels(tmpData$y, tmpData$class)
tmpData$class
model1 <- lm(y ~ class, tmpData, contrasts = list(class = contr.sdif))
summary(model1)
summary(model)
tmpData <- generateSample(1000, 5)
model <- lm(y ~ class, tmpData, contrasts = list(class = contr.sdif))
summary(model)
tmpData <- generateSample(1000, 5)
model <- lm(y ~ class, tmpData, contrasts = list(class = contr.sdif))
summary(model)
mergeLevels(tmpData$class, 2)
tmpData$class <- mergeLevels(tmpData$class, 2)
tmpData$class <- recodeLevels(tmpData$y, tmpData$class)
model1 <- lm(y ~ class, tmpData, contrasts = list(class = contr.sdif))
summary(model1)
function (object, ...)
summary(model)
summary(model)
summary(model1)
tmpData <- generateSample(1000, 10)
model <- lm(y ~ class, tmpData, contrasts = list(class = contr.sdif))
summary(model)
mergeLevels(tmpData$class, 10)
tmpData$class <- mergeLevels(tmpData$class, 10)
tmpData$class <- recodeLevels(tmpData$y, tmpData$class)
model1 <- lm(y ~ class, tmpData, contrasts = list(class = contr.sdif))
summary(model1)
summary(model)
tmpData <- generateSample(1000, 20)
model <- lm(y ~ class, tmpData, contrasts = list(class = contr.sdif))
tmpData$class <- mergeLevels(tmpData$class, 20)
tmpData$class <- recodeLevels(tmpData$y, tmpData$class)
model1 <- lm(y ~ class, tmpData, contrasts = list(class = contr.sdif))
summary(model)
summary(model1)
anova(lm(transaction.price ~ street, data = apartmentsSubset))
summary(lm(transaction.price ~ street, data = apartmentsSubset))
anova(lm(transaction.price ~ street, data = apartmentsSubset))
summary(lm(transaction.price ~ street, data = apartmentsSubset))
anova(lm(transaction.price ~ street, data = apartmentsSubset))
summary(lm(transaction.price ~ street, data = apartmentsSubset))
library(Rcmdr)
install.packages("Rcmdr")
library(Rcmdr)
library(Rcmdr)
levene.test(y, group)
levene.test(apartmentsSubset$transaction.price, apartmentsSubset$street)
leveneTest(apartmentsSubset$transaction.price, apartmentsSubset$street)
apartments %>% ggplot() + geom_boxplot(aes(x = street, y = transaction.price)) +
theme(axis.text.x = element_text(angle = 90)) +
coord_flip()
Subset
apartmentsSubset %>% ggplot() + geom_boxplot(aes(x = street, y = transaction.price)) +
theme(axis.text.x = element_text(angle = 90)) +
coord_flip()
aggregate(transaction.price ~ street, data = apartmentsSubset, sd)
aggregate(transaction.price ~ street, data = apartmentsSubset, mean)
apartmentsSubset %>% left_join(aggregate(transaction.price ~ street, data = apartmentsSubset, sd))
apartmentsSubset %>% left_join(aggregate(transaction.price ~ street, data = apartmentsSubset, sd), by = street)
apartmentsSubset
apartmentsSubset <- as.data.table(apartmentsSubset)
apartmentsSubset[, mean := mean(transaction.price), by = street]
apartmentsSubset[, sd := sd(transaction.price), by = street]
apartmentsSubset[, transaction.price := transaction.price / sd + mean]
apartmentsSubset %>% ggplot() + geom_boxplot(aes(x = street, y = transaction.price)) +
theme(axis.text.x = element_text(angle = 90)) +
coord_flip()
leveneTest(apartmentsSubset$transaction.price, apartmentsSubset$street)
apartmentsSubset <- PBImisc::apartments
apartmentsSubset <- subset(apartmentsSubset, select = c(transaction.price, street))
apartmentsSubset <- filter(apartmentsSubset, street %in% c("Chelmska",
"Odkryta",
"Czerniakowska",
"Broniewskiego",
"Jana Pawla",
"KEN",
"Pulawska",
"Raclawicka"))
apartmentsSubset$street <- factor(apartmentsSubset$street)
apartmentsSubset <- as.data.table(apartmentsSubset)
apartmentsSubset[, mean := mean(transaction.price), by = street]
apartmentsSubset[, sd := sd(transaction.price), by = street]
apartmentsSubset[, transaction.price := transaction.price / (0.01 *sd) + mean]
apartmentsSubset %>% ggplot() + geom_boxplot(aes(x = street, y = transaction.price)) +
theme(axis.text.x = element_text(angle = 90)) +
coord_flip()
apartmentsSubset <- PBImisc::apartments
apartmentsSubset <- subset(apartmentsSubset, select = c(transaction.price, street))
apartmentsSubset <- filter(apartmentsSubset, street %in% c("Chelmska",
"Odkryta",
"Czerniakowska",
"Broniewskiego",
"Jana Pawla",
"KEN",
"Pulawska",
"Raclawicka"))
apartmentsSubset$street <- factor(apartmentsSubset$street)
apartmentsSubset <- as.data.table(apartmentsSubset)
apartmentsSubset[, mean := mean(transaction.price), by = street]
apartmentsSubset[, sd := sd(transaction.price), by = street]
apartmentsSubset[, transaction.price := transaction.price / (0.001 *sd) + mean]
apartmentsSubset %>% ggplot() + geom_boxplot(aes(x = street, y = transaction.price)) +
theme(axis.text.x = element_text(angle = 90)) +
coord_flip()
apartmentsSubset <- PBImisc::apartments
apartmentsSubset <- subset(apartmentsSubset, select = c(transaction.price, street))
apartmentsSubset <- filter(apartmentsSubset, street %in% c("Chelmska",
"Odkryta",
"Czerniakowska",
"Broniewskiego",
"Jana Pawla",
"KEN",
"Pulawska",
"Raclawicka"))
apartmentsSubset$street <- factor(apartmentsSubset$street)
apartmentsSubset <- as.data.table(apartmentsSubset)
apartmentsSubset[, mean := mean(transaction.price), by = street]
apartmentsSubset[, sd := sd(transaction.price), by = street]
apartmentsSubset[, transaction.price := transaction.price / (0.0001 *sd) + mean]
apartmentsSubset %>% ggplot() + geom_boxplot(aes(x = street, y = transaction.price)) +
theme(axis.text.x = element_text(angle = 90)) +
coord_flip()
apartmentsSubset <- PBImisc::apartments
apartmentsSubset <- subset(apartmentsSubset, select = c(transaction.price, street))
apartmentsSubset <- filter(apartmentsSubset, street %in% c("Chelmska",
"Odkryta",
"Czerniakowska",
"Broniewskiego",
"Jana Pawla",
"KEN",
"Pulawska",
"Raclawicka"))
apartmentsSubset$street <- factor(apartmentsSubset$street)
apartmentsSubset <- as.data.table(apartmentsSubset)
apartmentsSubset[, mean := mean(transaction.price), by = street]
apartmentsSubset[, sd := sd(transaction.price), by = street]
apartmentsSubset[, transaction.price := transaction.price / (0.00001 *sd) + mean]
apartmentsSubset %>% ggplot() + geom_boxplot(aes(x = street, y = transaction.price)) +
theme(axis.text.x = element_text(angle = 90)) +
coord_flip()
leveneTest(apartmentsSubset$transaction.price, apartmentsSubset$street)
apartmentsSubset <- PBImisc::apartments
apartmentsSubset <- subset(apartmentsSubset, select = c(transaction.price, street))
apartmentsSubset <- filter(apartmentsSubset, street %in% c("Chelmska",
"Odkryta",
"Czerniakowska",
"Broniewskiego",
"Jana Pawla",
"KEN",
"Pulawska",
"Raclawicka"))
apartmentsSubset$street <- factor(apartmentsSubset$street)
apartmentsSubset <- as.data.table(apartmentsSubset)
apartmentsSubset[, mean := mean(transaction.price), by = street]
apartmentsSubset[, sd := sd(transaction.price), by = street]
apartmentsSubset[, transaction.price := transaction.price / (0.00001 *sd) + mean]
apartmentsSubset %>% ggplot() + geom_boxplot(aes(x = street, y = transaction.price)) +
theme(axis.text.x = element_text(angle = 90)) +
coord_flip()
leveneTest(apartmentsSubset$transaction.price, apartmentsSubset$street)
leveneTest(apartmentsSubset$transaction.price, apartmentsSubset$street)
anova(lm(transaction.price ~ street, data = apartmentsSubset))
summary(lm(transaction.price ~ street, data = apartmentsSubset))
summary(aov(transaction.price ~ street, data = apartmentsSubset))
lsdResult <- LSD.test(aov(transaction.price ~ street, data = apartmentsSubset),
trt = "street",
p.adj = "bonferroni")
lsdResult$groups
tmpData <- generateSample(1000, 3)
model <- lm(y ~ class, tmpData, contrasts = list(class = contr.sdif))
tmpData$class <- mergeLevels(tmpData$class, 3)
tmpData$class <- recodeLevels(tmpData$y, tmpData$class)
model1 <- lm(y ~ class, tmpData, contrasts = list(class = contr.sdif))
summary(model)
summary(model1)
source('~/.active-rstudio-document', echo=TRUE)
tmpData <- generateSample(1000, 4)
model <- lm(y ~ class, tmpData, contrasts = list(class = contr.sdif))
tmpData$class <- mergeLevels(tmpData$class, 4)
tmpData$class <- recodeLevels(tmpData$y, tmpData$class)
model1 <- lm(y ~ class, tmpData, contrasts = list(class = contr.sdif))
summary(model)
summary(model1)
t.test(tmpData$y[tmpData$class == "A"], tmpData$y[tmpData$class == "B"])
tmpData$y[tmpData$class == "A"]
tmpData <- generateSample(1000, 4)
t.test(tmpData$y[tmpData$class == "A"], tmpData$y[tmpData$class == "B"])
